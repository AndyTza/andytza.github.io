name: Build and Deploy multilingual Jekyll site to GitHub Pages

on:
  push:
    branches: [ main ]        # <-- change "main" if your default branch is differents..
  workflow_dispatch:          # lets you trigger it manually from the Actions tab

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: github-pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Set up Ruby with Bundler cache so we can bundle using YOUR Gemfile
      # This is how we get jekyll-multiple-languages-plugin to load in CI.
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'     # match your Ruby major/minor if you know it (3.x is fine)
          bundler-cache: true

      - name: Install gems
        run: bundle install --jobs 4 --retry 3

      # This is the actual Jekyll build, *in Actions*, with all your plugins
      - name: Build site with Jekyll (multilang)
        run: bundle exec jekyll build --trace

      # Tell Pages "we are preparing a deployable artifact"
      # Official GitHub Pages workflow does this. :contentReference[oaicite:4]{index=4}
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      # Upload the built static site in _site/ as the Pages artifact
      # This becomes the content GitHub Pages will serve. :contentReference[oaicite:5]{index=5}
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: _site

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # This publishes the artifact from the build job to GitHub Pages.
      # It's the official action for deployment. :contentReference[oaicite:6]{index=6}
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
